// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createCollectionEnum creates enum of collection names 1`] = `
"export enum Collections {
	Book = "book",
	Magazine = "magazine",
}"
`;

exports[`createCollectionRecord creates mapping of collection name to record type 1`] = `
"export type CollectionRecords = {
	book: BookRecord
	magazine: MagazineRecord
}"
`;

exports[`createDirectExpand createDirectExpand create expand type for direct relation 1`] = `
[
  [
    "	user: UsersResponse",
  ],
  [
    "	user: "user"",
  ],
]
`;

exports[`createDirectExpand createDirectExpand create expand type for direct relation with two or more maxSelect 1`] = `
[
  [
    "	authors: AuthorsResponse[]",
  ],
  [
    "	authors: "authors"",
  ],
]
`;

exports[`createDirectExpand createDirectExpand not create expand type for unexist direct relation 1`] = `
[
  [],
  [],
]
`;

exports[`createDirectExpand createExpand create expand type 1`] = `
"type UsersExpandType = {
	"authors(user)": AuthorsResponse[]
}
export const UsersExpandKeys = {
  	authors: "authors(user)"
}"
`;

exports[`createDirectExpand createIndirectExpand create expand type for indirect relation 1`] = `
[
  [
    "	"authors(user)": AuthorsResponse[]",
  ],
  [
    "	authors: "authors(user)"",
  ],
]
`;

exports[`createDirectExpand createIndirectExpand not create expand type for indirect relation with two or more maxSelect 1`] = `
[
  [],
  [],
]
`;

exports[`createRecordType creates type definition for a record 1`] = `
"export type BooksRecord = {
	title?: string
}"
`;

exports[`createRecordType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[]
}"
`;

exports[`createResponseType creates type definition for a response 1`] = `"export type BooksResponse = BooksRecord & BaseSystemFields<BooksExpandType>"`;

exports[`createResponseType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[]
}"
`;

exports[`createSelectOptions creates enum types for select options 1`] = `
"export enum ChooseTitleOptions {
	"one" = "one",
	"two" = "two",
	"space space" = "space space",
	"$@#*(&#%" = "$@#*(&#%",
}
"
`;

exports[`generate generates correct output given db input 1`] = `
"/**
* This file was @generated using pocketbase-typegen
*/

export enum Collections {
	Books = "books",
}

// Alias types for improved usability
export type IsoDateString = string
export type RecordIdString = string

// System fields
export type BaseSystemFields<T> = {
	id: RecordIdString
	created: IsoDateString
	updated: IsoDateString
	collectionId: string
	collectionName: Collections
	expand?: T extends object ? T : never
}

export type AuthSystemFields = {
	email: string
	emailVisibility: boolean
	username: string
	verified: boolean
}

// Record types for each collection

export type BooksRecord = {
	title?: string
}

// Expand types are used to define the expand object in the PocketBase API
type BooksExpandType = {
	// Doesn't have any relation
}

// Response types include system fields and match responses from the PocketBase API
export type BooksResponse = BooksRecord & BaseSystemFields<BooksExpandType>

export type CollectionRecords = {
	books: BooksRecord
}"
`;
